import React from 'react';
import Head from 'next/head';
import { Layout } from '../components/layout/layout';
import { Profile } from '../components/profile/profile';
import { RepositorieContent } from '../components/repositorie-content/repositorie-content';
import { RepositoryContext, TContextType } from '../context/app-context';
// import { user, repositoryList } from '../utils/fakeData';
import {
  getRepositories,
  getUser,
  handleLoadingPage,
  setError,
} from '../reducers/repositories/repositories.actions';

import { BiSearchAlt } from 'react-icons/bi';
import { Modal } from '../components/modal/modal';
import { Loading } from '../components/loading/loading';
import { getData } from '../services/getRepositories';
import { NotFound } from '../components/not-found/not-found';

export default function Home() {
  const appState = React.useContext(RepositoryContext) as TContextType;
  const { state, dispatch, setShowModal, currentUser, isShowModal } = appState;
  function handleShowModal() {
    setShowModal(!isShowModal);
  }

  React.useEffect(() => {
    dispatch(handleLoadingPage(false));
    getData(currentUser)
      .then(data => {
        if (!data) {
          dispatch(setError(true));
          dispatch(handleLoadingPage(false));
          return;
        }
        const [user, repos] = data;
        if (user.status === 200 && repos.status === 200) {
          dispatch(getUser(user.user));
          dispatch(getRepositories(repos.repos));
          dispatch(handleLoadingPage(false));
          dispatch(setError(false));
        }
      })
      .catch(err => {
        console.log(err);
        dispatch(setError(true));
        console.log('was happen a wrong');
        // dispatch(handleLoadingPage(true));
      });

    dispatch(handleLoadingPage(true));
  }, [dispatch, currentUser]);

  return (
    <>
      <Head>
        <title>Your Repositories | Github</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      {state.isError && <NotFound />}
      {state.isLoading && <Loading />}
      {!state.isLoading && !state.isError && (
        <Layout>
          <Profile />
          <RepositorieContent />
        </Layout>
      )}
      <button
        onClick={handleShowModal}
        className="btn-float btn-search is-border"
        title="search user"
      >
        <BiSearchAlt />
      </button>
      {isShowModal && <Modal />}
    </>
  );
}
